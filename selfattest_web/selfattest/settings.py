"""
Django settings for selfattest project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""


import datetime
import os

import dj_database_url

from decouple import config

###############################################################################
# Sentry
import sentry_sdk
from sentry_sdk.integrations.redis import RedisIntegration

from sentry_sdk.integrations.django import DjangoIntegration


BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

###############################################################################
# Deployement Method
# TBD: See - https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

IS_PROD = config('IS_PROD', default=True, cast=bool)
IS_LOCAL = config('IS_LOCAL', default=False, cast=bool)

IN_CONTAINER = config('IN_CONTAINER', default=True, cast=bool)

DEBUG = config('DEBUG', default=True, cast=bool)

###############################################################################
# Security

SECRET_KEY = config('SECRET_KEY')


ALLOWED_HOSTS = ['localhost', '127.0.0.1',
                 'www.api.selfattest.online', 'api.selfattest.online']
if (not IS_LOCAL) and (IS_PROD):
    # https://docs.djangoproject.com/en/3.0/ref/settings/#std:setting-SECURE_SSL_REDIRECT
    SECURE_SSL_REDIRECT = True
    # https://docs.djangoproject.com/en/3.0/ref/settings/#secure-proxy-ssl-header
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    # Below 2 are after reading guide on DigitalOcean
    # https://www.digitalocean.com/community/tutorials/how-to-set-up-a-scalable-django-app-with-digitalocean-managed-databases-and-spaces
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True


# https://pypi.org/project/django-cors-headers/
# Below - Allow all shall be false and it should pick from whitelist. Today that is not working
# need to look at.
CORS_ORIGIN_ALLOW_ALL = True

# TBD: Find out the right values for Mobile App
# CORS_ORIGIN_WHITELIST = [
#    "https://www.selfattest.online",
#    "https://selfattest.online",
# ]
# if IS_PREPROD:
#    CORS_ORIGIN_WHITELIST += [
#        'https://www.test.selfattest.online',
#        'https://test.selfattest.online',
#        "https://127.0.0.1",
#        "https://localhost"]


CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'OPTIONS',
    'POST',
    'PATCH',
    'PUT',
)

CORS_ALLOW_HEADERS = (
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
)


###############################################################################
# Application definition


DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    # 'django.contrib.staticfiles',
    'storages',  # Django Storage
]

THIRD_PARTY_APPS = [
    'rest_framework',
    'corsheaders'
]

if IS_LOCAL:
    THIRD_PARTY_APPS += ['silk']

PROJECT_APPS = [
    'account.apps.AccountConfig',
    'media_photo.apps.MediaPhotoConfig',

]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + PROJECT_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

if IS_LOCAL:  # https://github.com/jazzband/django-silk
    MIDDLEWARE += ['silk.middleware.SilkyMiddleware']


###############################################################################
# Debug ToolBar

if DEBUG:
    INTERNAL_IPS = ('127.0.0.1',)
    MIDDLEWARE += (
        'debug_toolbar.middleware.DebugToolbarMiddleware',
    )
    INSTALLED_APPS += (
        'debug_toolbar',
    )

ROOT_URLCONF = 'selfattest.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'selfattest.wsgi.application'


###############################################################################
# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASE_URL = config('DATABASE_URL') if IN_CONTAINER else config(
    'DATABASE_URL_LOCAL_DEV')
DATABASES = {}
DEFAULT_DB_CONFIG = dj_database_url.parse(
    DATABASE_URL, conn_max_age=600, ssl_require=not DEBUG)

DATABASES['default'] = DEFAULT_DB_CONFIG

if IS_LOCAL:
    DEFAULT_DB_CONFIG['TEST'] = {'NAME': config('TEST_DB_NAME')}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators


AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


AUTH_USER_MODEL = "account.SelfattestUser"

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


###############################################################################
# File Hosting.

# https://www.digitalocean.com/community/tutorials/how-to-set-up-a-scalable-django-app-with-digitalocean-managed-databases-and-spaces
# https://testdriven.io/blog/storing-django-static-and-media-files-on-amazon-s3/


# https://docs.djangoproject.com/en/3.0/ref/settings/#data-upload-max-memory-size
DATA_UPLOAD_MAX_MEMORY_SIZE = 6*1024*1024  # 6Mb

# 4Mb, The maximum size (in bytes) that an upload will be before it gets streamed to the file system
FILE_UPLOAD_MAX_MEMORY_SIZE = 6*1024*1024
CLOUD_STORAGE = config('CLOUD_STORAGE', default=False, cast=bool)

if CLOUD_STORAGE:
    MEDIA_BUCKET_NAME = 'selfattest' if IS_PROD else 'selfattest'
    AWS_ACCESS_KEY_ID = config('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = config('AWS_SECRET_ACCESS_KEY')
    AWS_S3_ENDPOINT_URL = config('AWS_S3_ENDPOINT_URL')
    AWS_S3_OBJECT_PARAMETERS = {
        'CacheControl': 'max-age=86400',
    }
    AWS_DEFAULT_ACL = 'public-read'

    DEFAULT_FILE_STORAGE = 'selfattest.storage.PublicMediaStorage'
else:
    #STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
    #STATIC_URL = 'static/'
    MEDIA_URL = 'media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'mediafiles')


###############################################################################
# Cache

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": config('REDIS_URL'),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient"
        },
        "KEY_PREFIX": "api.selfattest"
    }
}


###############################################################################
# Django Rest Framework

REST_DEFAULT_RENDERER_CLASSES = ['rest_framework.renderers.JSONRenderer']

REST_FRAMEWORK = {
    'PAGE_SIZE': 20,
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_RENDERER_CLASSES': REST_DEFAULT_RENDERER_CLASSES,
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
    ],
    # https://github.com/encode/django-rest-framework/blob/master/rest_framework/throttling.py
    # HTTP_X_FORWARDED_FOR is a comma seperated IP list for us
    # REMOTE_ADDR is address of Droplet or load balancer (172.x.x.x)
    'DEFAULT_THROTTLE_RATES': {
        'anon': '4/hour',

    }
}

###############################################################################
# Throttling
if IS_PROD:
    REST_FRAMEWORK['DEFAULT_THROTTLE_RATES'] = {
        'anon': '4/hour',
    }
else:
    REST_FRAMEWORK['DEFAULT_THROTTLE_RATES'] = {
        'anon': '400/minute',
    }


###############################################################################
# Logger

APPLICATION_LOGGERS_DEFAULT_LEVEL = 'INFO' if IS_PROD else 'DEBUG'
APPLICATION_LOGGERS_DEFAULT_HANDLERS = ['console']

APPLICATION_LOGGERS = {
    'services': {
        'handlers': APPLICATION_LOGGERS_DEFAULT_HANDLERS,
        'level': APPLICATION_LOGGERS_DEFAULT_LEVEL,
        'propagate': False,
    },
    'media_photo': {
        'handlers': APPLICATION_LOGGERS_DEFAULT_HANDLERS,
        'level': APPLICATION_LOGGERS_DEFAULT_LEVEL,
        'propagate': False,
    }
}

DJANGO_DEFAULT_LOGGERS = {
    'django': {
        'handlers': ['console'],
        'propagate': False,
        'level': 'ERROR' if IS_PROD else 'INFO'
    },
    'django.request': {
        'handlers': ['console'],
        'level': 'ERROR' if IS_PROD else 'DEBUG',
        'propagate': False,
    },
    'django.db.backends': {
        'handlers': ['console'],
        'propagate': False,
        'level':  'ERROR' if IS_PROD else 'WARNING'
    },
    'django.security': {
        'handlers': ['console'],
        'propagate': False,
        'level': 'WARNING' if IS_PROD else 'DEBUG'
    },
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,

    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {name} {funcName} {lineno} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },

    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        }
    },

    'handlers': {
        'null': {
            'class': 'logging.NullHandler',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose' if DEBUG else 'simple'
        },
    },

    'loggers': {
        **DJANGO_DEFAULT_LOGGERS,
        **APPLICATION_LOGGERS
    }
}


if not IS_LOCAL:
    SENTRY_DSN = config('SENTRY_DSN')
    sentry_sdk.init(
        dsn=SENTRY_DSN,
        integrations=[DjangoIntegration(),
                      RedisIntegration()],

        # If you wish to associate users to errors (assuming you are using
        # django.contrib.auth) you may enable sending PII data.
        send_default_pii=False
    )

#######################################################################################
